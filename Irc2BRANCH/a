diff --git a/Irc2BRANCH/Channel.cpp b/Irc2BRANCH/Channel.cpp
index 6c47408..8b2c4f1 100644
--- a/Irc2BRANCH/Channel.cpp
+++ b/Irc2BRANCH/Channel.cpp
@@ -6,7 +6,7 @@
 /*   By: abaiao-r <abaiao-r@student.42.fr>          +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/10/30 12:34:24 by gacorrei          #+#    #+#             */
-/*   Updated: 2023/11/23 19:57:10 by abaiao-r         ###   ########.fr       */
+/*   Updated: 2023/11/27 17:01:22 by abaiao-r         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -65,9 +65,13 @@ Channel	&Channel::operator=(const Channel &copy)
 		_password = copy._password;
 		_topic = copy._topic;
 		_topic_mode = copy._topic_mode;
-		_channel_invite_only = copy._channel_invite_only;
 		_channel_limit = copy._channel_limit;
+		_channel_invite_only = copy._channel_invite_only;
 		_clients_in_channel = copy._clients_in_channel;
+		_clients_banned = copy._clients_banned;
+		_clients_operator_channel = copy._clients_operator_channel;
+		_clients_invited_to_channel = copy._clients_invited_to_channel;
+
 	}
 	return (*this);
 }
@@ -99,12 +103,6 @@ std::string	Channel::get_password(void) const
 /* set_password() sets the password of the channel. */
 void	Channel::set_password(std::string password)
 {
-	// int	check = password_checker(password);
-
-	// if (check == 1)
-		//Message pass size
-	// else if (check == 2)
-		//Message non printable
 	_password = password;
 }
 
@@ -345,7 +343,9 @@ Client	*Channel::find_banned_client(const std::string &client_banned)
 	return it.base();
 }
 
-/* find_clients_operator_channel: looks for a client in the vector of clients*/
+/* find_clients_operator_channel: returns a pointer to the client if it is
+ * found in the vector of clients that are operators in the channel. Otherwise,
+ * it returns NULL. */
 Client	*Channel::find_clients_operator_channel(Client &client)
 {
 	std::vector<Client>::iterator it = find(_clients_operator_channel.begin(), _clients_operator_channel.end(), client);
@@ -420,6 +420,21 @@ Client	*Channel::find_banned_client(Client &client)
 	return (NULL);
 }
 
+/* find_banned_client_by_nickname(Client &client):
+** 1. Looks for a client in the vector of clients that are banned from the channel.
+** 2. Returns a pointer to the client if it is found in the vector.
+** 3. Otherwise, it returns NULL.
+*/
+Client	*Channel::find_banned_client_by_nickname(Client &client)
+{
+	std::string nickname_to_find = client.get_nickname();
+	C_IT	it = find(_clients_banned.begin(), _clients_banned.end(), nickname_to_find);
+	
+		if (it != _clients_banned.end())
+			return (it.base());
+	return (NULL);
+}
+
 /* find_clients_invited_to_channel_by_nickname(std::string &nickname_to_find):
 ** 1. Looks for a client in the vector of clients that are invited to the channel.
 ** 2. Returns a pointer to the client if it is found in the vector.
diff --git a/Irc2BRANCH/Channel.hpp b/Irc2BRANCH/Channel.hpp
index 0b5807a..085f65f 100644
--- a/Irc2BRANCH/Channel.hpp
+++ b/Irc2BRANCH/Channel.hpp
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   Channel.hpp                                        :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: gacorrei <gacorrei@student.42lisboa.com>   +#+  +:+       +#+        */
+/*   By: abaiao-r <abaiao-r@student.42.fr>          +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/10/30 12:30:20 by gacorrei          #+#    #+#             */
-/*   Updated: 2023/11/26 12:12:22 by gacorrei         ###   ########.fr       */
+/*   Updated: 2023/11/27 16:31:15 by abaiao-r         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -91,6 +91,7 @@ class Channel
 		Client 				*find_clients_invited_to_channel_by_nickname(std::string &nickname_to_find);
 		Client				*find_client(Client &client);
 		Client				*find_banned_client(Client &client);
+		Client				*find_banned_client_by_nickname(Client &client);
 		void				message(Client &client, std::string msg);
 		void				info_message(std::string msg);
 		int 				sendSuccessMessage(int client_fd, const std::string	&successMessage);
diff --git a/Irc2BRANCH/Server.hpp b/Irc2BRANCH/Server.hpp
index d867aa3..132e520 100644
--- a/Irc2BRANCH/Server.hpp
+++ b/Irc2BRANCH/Server.hpp
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   Server.hpp                                         :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: gacorrei <gacorrei@student.42lisboa.com>   +#+  +:+       +#+        */
+/*   By: abaiao-r <abaiao-r@student.42.fr>          +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/10/27 15:58:00 by abaiao-r          #+#    #+#             */
-/*   Updated: 2023/11/26 12:24:45 by gacorrei         ###   ########.fr       */
+/*   Updated: 2023/11/27 14:44:01 by abaiao-r         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -229,7 +229,19 @@ class Server
 		int 		cmd_kick(Client &client, std::string input);
 		int 		cmd_invite(Client &client, std::string input);
 		int			cmd_topic(Client &client, std::string input);
+		/*mode funtions*/
 		int			cmd_mode(Client &client, std::string input);
+		int 		handleModePlusO(Client &client, Channel *channel, std::string argument, int fd);
+		int 		handleModeMinusO(Client &client, Channel *channel, std::string argument, int fd);
+		int 		handleModePlusK(Channel *channel, std::string argument, int fd);
+		int 		handleModeMinusK(Channel *channel, int fd);
+		int 		handleModePlusI(Channel *channel, int fd);
+		int 		handleModeMinusI(Channel *channel, int fd);
+		int 		handleModePlusT(Channel *channel, int fd);
+		int 		handleModeMinusT(Channel *channel, int fd);
+		int 		handleModePlusL(Channel *channel, std::string argument, int fd);
+		int 		handleModeMinusL(Channel *channel, int fd);
+		/*end mode functions*/
 		int			cmd_who(Client &client, std::string input);
 		int			sendErrorMessage(int client_fd, const std::string& errorMessage);
 		int 		sendSuccessMessage(int client_fd, const std::string	&successMessage);
diff --git a/Irc2BRANCH/ServerCommands.cpp b/Irc2BRANCH/ServerCommands.cpp
index 14b13df..c296c86 100644
--- a/Irc2BRANCH/ServerCommands.cpp
+++ b/Irc2BRANCH/ServerCommands.cpp
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   ServerCommands.cpp                                 :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: gacorrei <gacorrei@student.42lisboa.com>   +#+  +:+       +#+        */
+/*   By: abaiao-r <abaiao-r@student.42.fr>          +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/11/24 08:29:50 by gacorrei          #+#    #+#             */
-/*   Updated: 2023/11/26 12:38:36 by gacorrei         ###   ########.fr       */
+/*   Updated: 2023/11/27 17:01:13 by abaiao-r         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -113,6 +113,284 @@ int	Server::cmd_who(Client &client, std::string input)
 	return 0;
 }
 
+/* cmd_mode: set mode of channel
+ * 1. Parse input into channel name and mode
+ * 2. Check if client is administrator
+ * 3. Find the channel
+ * 4. Set mode of channel
+ */
+// int Server::cmd_mode(Client &client, std::string input)
+// {
+// 	std::istringstream iss(input);
+// 	std::string channel_to_find;
+// 	std::string mode;
+// 	std::string argument;
+// 	std::string message;
+// 	int			fd = client.get_client_fd();
+
+// 	// Parse input
+// 	iss >> channel_to_find >> mode >> argument;
+
+// 	// debug
+// 	std::cout << BOLDYELLOW << "cmd_mode" << std::endl;
+// 	std::cout << "channel_to_find: " << channel_to_find << "|" << std::endl;
+// 	std::cout << "mode: " << mode << "|" << std::endl;
+// 	std::cout << "argument: " << argument << "|" << std::endl;
+// 	std::cout << RESET << std::endl;
+// 	// Find the channel
+// 	Channel *channel = findChannel(client, channel_to_find);
+// 	if (!channel)
+// 	{
+// 		message = ":localhost " + ERR_NOSUCHCHANNEL + " : Error[MODE]: Channel " + channel_to_find + " does not exist\r\n";
+// 		sendErrorMessage(fd, message);
+// 		return (1);
+// 	}
+// 	// Find if Client is in vector of clients operator_channel
+// 	if (!channel->find_clients_operator_channel(client))
+// 	{
+// 		message = ":localhost " + ERR_CHANOPRIVSNEEDED + " : Error[MODE]: You are not an operator in channel " + channel_to_find + "\r\n";
+// 		sendErrorMessage(fd, message);
+// 		return (1);
+// 	}
+// 	if (mode.empty())
+// 	{
+// 		message = ":localhost " + RPL_CHANNELMODEIS + " " + channel_to_find + " " + channel_to_find + ": " + channel->get_mode() + "\r\n";
+// 		sendSuccessMessage(fd, message);
+// 		return (0);
+// 	}
+// 	// Set mode of channel
+// 	if (mode == "+o")
+// 	{
+// 		// Expecting format: MODE <channel> +o <nickname>
+// 		// look if argument(client to become operator) is in the channel
+// 		if (!channel->find_client_in_channel_by_nickname(argument))
+// 		{
+// 			message = ":localhost " + ERR_NOSUCHNICK + " : Error[MODE +o]: " + argument + " is not in the channel " + channel->get_name() + "\r\n"; 
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		// look for nickname in clients operator_channel
+// 		if (channel->find_clients_operator_channel(argument))
+// 		{
+// 			message = "Error[MODE +o]: " + argument + " is already an admin in channel " + channel_to_find + "\r\n";
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		// add nickname to clients operator_channel
+// 		// find client by nickname
+// 		Client *client_to_add = find_client(client, argument);
+// 		if (!client_to_add)
+// 		{
+// 			message = ":localhost " + ERR_NOSUCHNICK + " : Error[MODE +o]: Client " + argument + " does not exist\r\n";
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		channel->add_client_to_clients_operator_vector(*client_to_add);
+// 		message = "Success[MODE +o]: " + argument + " is now an admin in channel " + channel_to_find + "\r\n";
+// 		sendSuccessMessage(fd, message);
+// 		sendSuccessMessage(client_to_add->get_client_fd(), message);
+// 		return (0);
+// 	}
+// 	else if (mode == "-o")
+// 	{
+// 		// Expecting format: MODE <channel> +o <nickname>
+// 		// look if argument(client to become operator) is in the channel
+// 		if (!channel->find_client_in_channel_by_nickname(argument))
+// 		{
+// 			message = "Error[MODE -o]: " + argument + " is not in the channel " + channel->get_name() + "\r\n"; 
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		// look for nickname in clients operator_channel
+// 		if (!channel->find_clients_operator_channel(argument))
+// 		{
+// 			message = "Error[MODE -o]: " + argument + " is not an admin in channel " + channel_to_find + "\r\n";
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		// remove nickname from clients operator_channel
+// 		// find client by nickname
+// 		Client *client_to_remove = find_client(client, argument);
+// 		if (!client_to_remove)
+// 		{
+// 			message = ":localhost " + ERR_NOSUCHNICK + " : Error[MODE -o]: Client " + argument + " does not exist\r\n";
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		channel->remove_client_from_clients_operator_vector(*client_to_remove);
+// 		message = "Success[MODE -o]: " + argument + " is no longer an operator in channel " + channel_to_find + "\r\n";
+// 		sendSuccessMessage(fd, message);
+// 		return (0);
+// 	}
+// /* 	if (mode == "+o" || mode == "-o")
+// 	{
+// 		bool check = mode[0] == '+' ? true : false;
+// 		// look if argument(client to become operator) is in the channel
+// 		if (!channel->find_client_in_channel_by_nickname(argument))
+// 		{
+// 			message = ":localhost " + ERR_NOSUCHNICK + " : Error[MODE]: " + argument + " is not in the channel " + channel->get_name() + "\r\n"; 
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		// look for nickname in clients operator_channel
+// 		if (channel->find_clients_operator_channel(argument))
+// 		{
+// 			message = check ? "Error[MODE +o]: " + argument + " is already an admin in channel " + channel_to_find + "\r\n"
+// 							: "Error[MODE -o]: " + argument + " is not an admin in channel " + channel_to_find + "\r\n";
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		// find client by nickname
+// 		Client *found = find_client(client, argument);
+// 		if (!found)
+// 		{
+// 			message = check ? ":localhost " + ERR_NOSUCHNICK + " : Error[MODE +o]: Client " + argument + " does not exist\r\n"
+// 							: ":localhost " + ERR_NOSUCHNICK + " : Error[MODE -o]: Client " + argument + " does not exist\r\n";
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		message = check ? message = "Success[MODE +o]: " + argument + " is now an admin in channel " + channel_to_find + "\r\n"
+// 						: "Success[MODE -o]: " + argument + " is no longer an operator in channel " + channel_to_find + "\r\n";
+// 		if (check)
+// 		{
+// 			channel->add_client_to_clients_operator_vector(*found);
+// 			sendSuccessMessage(found->get_client_fd(), message);
+// 		}
+// 		else
+// 			channel->remove_client_from_clients_operator_vector(*found);
+// 		sendSuccessMessage(fd, message);
+// 		return 0;
+// 	} */
+// 	else if (mode == "+k")
+// 	{
+// 		// Expecting format: MODE <channel> +k <password>
+// 		// check if password is valid
+// 		if (password_checker(argument, fd) == 1)
+// 			return (1);
+// 		// change password of channel
+// 		channel->set_password(argument);
+// 		message = "Success: Password of channel " + channel_to_find + " changed to " + argument + "\r\n";
+// 		sendSuccessMessage(fd, message);
+// 		return (0);
+// 	}
+// 	else if (mode == "-k")
+// 	{
+// 		// Expecting format: MODE <channel> -k
+// 		// check if channel has password
+// 		if (channel->get_password().empty())
+// 		{
+// 			message = "Error[MODE -k]: Channel " + channel_to_find + " does not have a password\r\n";
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		// remove password of channel
+// 		channel->set_password("");
+// 		message = "Success[MODE -k]: Password of channel " + channel_to_find + " removed\r\n";
+// 		sendSuccessMessage(fd, message);
+// 		return (0);
+// 	}
+// 	else if (mode == "+i")
+// 	{
+// 		// Expecting format: MODE <channel> +i
+// 		// check if channel is invite only
+// 		if (channel->get_channel_invite_only() == true)
+// 		{
+// 			message = "Error[MODE +i]: Channel " + channel_to_find + " is already invite only\r\n";
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		// set channel to invite only
+// 		channel->set_channel_invite_only(true);
+// 		message = "Success[MODE +i]: Channel " + channel_to_find + " is now invite only\r\n";
+// 		sendSuccessMessage(fd, message);
+// 		return (0);
+// 	}
+// 	else if (mode == "-i")
+// 	{
+// 		// Expecting format: MODE <channel> -i
+// 		// check if channel is invite only
+// 		if (channel->get_channel_invite_only() == false)
+// 		{
+// 			message = "Error[MODE -i]: Channel " + channel_to_find + "already not invite only\r\n";
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		// set channel to invite only
+// 		channel->set_channel_invite_only(false);
+// 		message = "Success[MODE -i]: Channel " + channel_to_find + " is now not invite only\r\n";
+// 		sendSuccessMessage(fd, message);
+// 		return (0);
+// 	}
+// 	else if (mode == "+t")
+// 	{
+// 		// Expecting format: MODE <channel> +t
+// 		// check if channel topic_mode is true
+// 		if (channel->get_topic_mode() == true)
+// 		{
+// 			message = "Error[MODE +t]: Channel " + channel_to_find + " already has topic mode set\r\n";
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		// set channel topic_mode to true
+// 		channel->set_topic_mode(true);
+// 		message = "Success[MODE +t]: Channel " + channel_to_find + " now has topic mode set\r\n";
+// 		sendSuccessMessage(fd, message);
+// 		return (0);
+// 	}
+// 	else if (mode == "-t")
+// 	{
+// 		// Expecting format: MODE <channel> -t
+// 		// check if channel topic_mode is false
+// 		if (channel->get_topic_mode() == false)
+// 		{
+// 			message = "Error[MODE -t]: Channel " + channel_to_find + " already has topic mode not set\r\n";
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		// set channel topic_mode to false
+// 		channel->set_topic_mode(false);
+// 		message = "Success[MODE -t]: Channel " + channel_to_find + " now has topic mode not set\r\n";
+// 		sendSuccessMessage(fd, message);
+// 		return (0);
+// 	}
+// 	else if (mode == "+l")
+// 	{
+// 		// Expecting format: MODE <channel> +l <limit>
+// 		// transform argument into a number
+// 		std::istringstream issz(argument);
+// 		long unsigned int limit;
+// 		issz >> limit;
+// 		// change channel limit
+// 		channel->set_channel_limit(limit);
+// 		message = "Success[MODE +l]: Channel " + channel_to_find + " now has limit " + argument + "\r\n";
+// 		sendSuccessMessage(fd, message);
+// 		return (0);
+// 	}
+// 	else if (mode == "-l")
+// 	{
+// 		// Expecting format: MODE <channel> -l
+// 		// check if channel limit is 0
+// 		if (channel->get_channel_limit() == 0)
+// 		{
+// 			message = "Error[MODE -l]: Channel " + channel_to_find + " already has no limit\r\n";
+// 			sendErrorMessage(fd, message);
+// 			return (1);
+// 		}
+// 		// change channel limit
+// 		channel->set_channel_limit(0);
+// 		message = "Success[MODE -l]: Channel " + channel_to_find + " now has no limit\r\n";
+// 		sendSuccessMessage(fd, message);
+// 		return (0);
+// 	}
+// 	else
+// 	{
+// 		message = "Error[MODE]: Usage: MODE <channel> [+|-][o|k|i|t|l] <argument>\r\n";
+// 		sendErrorMessage(fd, message);
+// 		return (1);
+// 	}
+// 	return (0);
+// }
+
 /* cmd_mode: set mode of channel
  * 1. Parse input into channel name and mode
  * 2. Check if client is administrator
@@ -126,7 +404,7 @@ int Server::cmd_mode(Client &client, std::string input)
 	std::string mode;
 	std::string argument;
 	std::string message;
-	int			fd = client.get_client_fd();
+	int fd = client.get_client_fd();
 
 	// Parse input
 	iss >> channel_to_find >> mode >> argument;
@@ -137,6 +415,7 @@ int Server::cmd_mode(Client &client, std::string input)
 	std::cout << "mode: " << mode << "|" << std::endl;
 	std::cout << "argument: " << argument << "|" << std::endl;
 	std::cout << RESET << std::endl;
+
 	// Find the channel
 	Channel *channel = findChannel(client, channel_to_find);
 	if (!channel)
@@ -145,6 +424,7 @@ int Server::cmd_mode(Client &client, std::string input)
 		sendErrorMessage(fd, message);
 		return (1);
 	}
+
 	// Find if Client is in vector of clients operator_channel
 	if (!channel->find_clients_operator_channel(client))
 	{
@@ -152,242 +432,265 @@ int Server::cmd_mode(Client &client, std::string input)
 		sendErrorMessage(fd, message);
 		return (1);
 	}
+
 	if (mode.empty())
 	{
 		message = ":localhost " + RPL_CHANNELMODEIS + " " + channel_to_find + " " + channel_to_find + ": " + channel->get_mode() + "\r\n";
 		sendSuccessMessage(fd, message);
 		return (0);
 	}
-	// Set mode of channel
-	if (mode == "+o")
+	else if (mode == "+o")
+		return (handleModePlusO(client, channel, argument, fd));
+	else if (mode == "-o")
+		return (handleModeMinusO(client, channel, argument, fd));
+	else if (mode == "+k")
+		return (handleModePlusK(channel, argument, fd));
+	else if (mode == "-k")
+		return (handleModeMinusK(channel, fd));
+	else if (mode == "+i")
+		return (handleModePlusI(channel, fd));
+	else if (mode == "-i")
+		return (handleModeMinusI(channel, fd));
+	else if (mode == "+t")
+		return (handleModePlusT(channel, fd));
+	else if (mode == "-t")
+		return (handleModeMinusT(channel, fd));
+	else if (mode == "+l")
+		return (handleModePlusL(channel, argument, fd));
+	else if (mode == "-l")
+		return (handleModeMinusL(channel, fd));
+	else
 	{
-		// Expecting format: MODE <channel> +o <nickname>
-		// look if argument(client to become operator) is in the channel
-		if (!channel->find_client_in_channel_by_nickname(argument))
-		{
-			message = ":localhost " + ERR_NOSUCHNICK + " : Error[MODE +o]: " + argument + " is not in the channel " + channel->get_name() + "\r\n"; 
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		// look for nickname in clients operator_channel
-		if (channel->find_clients_operator_channel(argument))
-		{
-			message = "Error[MODE +o]: " + argument + " is already an admin in channel " + channel_to_find + "\r\n";
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		// add nickname to clients operator_channel
-		// find client by nickname
-		Client *client_to_add = find_client(client, argument);
-		if (!client_to_add)
-		{
-			message = ":localhost " + ERR_NOSUCHNICK + " : Error[MODE +o]: Client " + argument + " does not exist\r\n";
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		channel->add_client_to_clients_operator_vector(*client_to_add);
-		message = "Success[MODE +o]: " + argument + " is now an admin in channel " + channel_to_find + "\r\n";
-		sendSuccessMessage(fd, message);
-		sendSuccessMessage(client_to_add->get_client_fd(), message);
-		return (0);
+		message = "Error[MODE]: Usage: MODE <channel> [+|-][o|k|i|t|l] <argument>\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
 	}
-	else if (mode == "-o")
+}
+
+int Server::handleModePlusO(Client &client, Channel *channel, std::string argument, int fd)
+{
+	// Expecting format: MODE <channel> +o <nickname>
+	// look if argument(client to become operator) is in the channel
+	if (!channel->find_client_in_channel_by_nickname(argument))
 	{
-		// Expecting format: MODE <channel> +o <nickname>
-		// look if argument(client to become operator) is in the channel
-		if (!channel->find_client_in_channel_by_nickname(argument))
-		{
-			message = "Error[MODE -o]: " + argument + " is not in the channel " + channel->get_name() + "\r\n"; 
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		// look for nickname in clients operator_channel
-		if (!channel->find_clients_operator_channel(argument))
-		{
-			message = "Error[MODE -o]: " + argument + " is not an admin in channel " + channel_to_find + "\r\n";
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		// remove nickname from clients operator_channel
-		// find client by nickname
-		Client *client_to_remove = find_client(client, argument);
-		if (!client_to_remove)
-		{
-			message = ":localhost " + ERR_NOSUCHNICK + " : Error[MODE -o]: Client " + argument + " does not exist\r\n";
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		channel->remove_client_from_clients_operator_vector(*client_to_remove);
-		message = "Success[MODE -o]: " + argument + " is no longer an operator in channel " + channel_to_find + "\r\n";
-		sendSuccessMessage(fd, message);
-		return (0);
+		std::string message = ":localhost " + ERR_NOSUCHNICK + " : Error[MODE +o]: " + argument + " is not in the channel " + channel->get_name() + "\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
 	}
-/* 	if (mode == "+o" || mode == "-o")
+
+	// look for nickname in clients operator_channel
+	if (channel->find_clients_operator_channel(argument))
 	{
-		bool check = mode[0] == '+' ? true : false;
-		// look if argument(client to become operator) is in the channel
-		if (!channel->find_client_in_channel_by_nickname(argument))
-		{
-			message = ":localhost " + ERR_NOSUCHNICK + " : Error[MODE]: " + argument + " is not in the channel " + channel->get_name() + "\r\n"; 
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		// look for nickname in clients operator_channel
-		if (channel->find_clients_operator_channel(argument))
-		{
-			message = check ? "Error[MODE +o]: " + argument + " is already an admin in channel " + channel_to_find + "\r\n"
-							: "Error[MODE -o]: " + argument + " is not an admin in channel " + channel_to_find + "\r\n";
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		// find client by nickname
-		Client *found = find_client(client, argument);
-		if (!found)
-		{
-			message = check ? ":localhost " + ERR_NOSUCHNICK + " : Error[MODE +o]: Client " + argument + " does not exist\r\n"
-							: ":localhost " + ERR_NOSUCHNICK + " : Error[MODE -o]: Client " + argument + " does not exist\r\n";
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		message = check ? message = "Success[MODE +o]: " + argument + " is now an admin in channel " + channel_to_find + "\r\n"
-						: "Success[MODE -o]: " + argument + " is no longer an operator in channel " + channel_to_find + "\r\n";
-		if (check)
-		{
-			channel->add_client_to_clients_operator_vector(*found);
-			sendSuccessMessage(found->get_client_fd(), message);
-		}
-		else
-			channel->remove_client_from_clients_operator_vector(*found);
-		sendSuccessMessage(fd, message);
-		return 0;
-	} */
-	else if (mode == "+k")
+		std::string message = "Error[MODE +o]: " + argument + " is already an admin in channel " + channel->get_name() + "\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
+	}
+
+	// add nickname to clients operator_channel
+	// find client by nickname
+	Client *client_to_add = find_client(client, argument);
+	if (!client_to_add)
 	{
-		// Expecting format: MODE <channel> +k <password>
-		// check if password is valid
-		if (password_checker(argument, fd) == 1)
-			return (1);
-		// change password of channel
-		channel->set_password(argument);
-		message = "Success: Password of channel " + channel_to_find + " changed to " + argument + "\r\n";
-		sendSuccessMessage(fd, message);
-		return (0);
+		std::string message = ":localhost " + ERR_NOSUCHNICK + " : Error[MODE +o]: Client " + argument + " does not exist\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
 	}
-	else if (mode == "-k")
+
+	channel->add_client_to_clients_operator_vector(*client_to_add);
+	std::string message = "Success[MODE +o]: " + argument + " is now an admin in channel " + channel->get_name() + "\r\n";
+	sendSuccessMessage(fd, message);
+	sendSuccessMessage(client_to_add->get_client_fd(), message);
+	return (0);
+}
+
+// Implement the remaining mode functions similarly...
+int Server::handleModeMinusO(Client &client, Channel *channel, std::string argument, int fd)
+{
+	// Expecting format: MODE <channel> -o <nickname>
+	// look if argument(client to become operator) is in the channel
+	if (!channel->find_client_in_channel_by_nickname(argument))
 	{
-		// Expecting format: MODE <channel> -k
-		// check if channel has password
-		if (channel->get_password().empty())
-		{
-			message = "Error[MODE -k]: Channel " + channel_to_find + " does not have a password\r\n";
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		// remove password of channel
-		channel->set_password("");
-		message = "Success[MODE -k]: Password of channel " + channel_to_find + " removed\r\n";
-		sendSuccessMessage(fd, message);
-		return (0);
+		std::string message = ":localhost " + ERR_NOSUCHNICK + " : Error[MODE -o]: " + argument + " is not in the channel " + channel->get_name() + "\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
 	}
-	else if (mode == "+i")
+
+	// look for nickname in clients operator_channel
+	if (!channel->find_clients_operator_channel(argument))
 	{
-		// Expecting format: MODE <channel> +i
-		// check if channel is invite only
-		if (channel->get_channel_invite_only() == true)
-		{
-			message = "Error[MODE +i]: Channel " + channel_to_find + " is already invite only\r\n";
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		// set channel to invite only
-		channel->set_channel_invite_only(true);
-		message = "Success[MODE +i]: Channel " + channel_to_find + " is now invite only\r\n";
-		sendSuccessMessage(fd, message);
-		return (0);
+		std::string message = "Error[MODE -o]: " + argument + " is not an admin in channel " + channel->get_name() + "\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
 	}
-	else if (mode == "-i")
+
+	// remove nickname from clients operator_channel
+	// find client by nickname
+	Client *client_to_remove = find_client(client, argument);
+	if (!client_to_remove)
 	{
-		// Expecting format: MODE <channel> -i
-		// check if channel is invite only
-		if (channel->get_channel_invite_only() == false)
-		{
-			message = "Error[MODE -i]: Channel " + channel_to_find + "already not invite only\r\n";
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		// set channel to invite only
-		channel->set_channel_invite_only(false);
-		message = "Success[MODE -i]: Channel " + channel_to_find + " is now not invite only\r\n";
-		sendSuccessMessage(fd, message);
-		return (0);
+		std::string message = ":localhost " + ERR_NOSUCHNICK + " : Error[MODE -o]: Client " + argument + " does not exist\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
 	}
-	else if (mode == "+t")
+
+	channel->remove_client_from_clients_operator_vector(*client_to_remove);
+	std::string message = "Success[MODE -o]: " + argument + " is no longer an admin in channel " + channel->get_name() + "\r\n";
+	sendSuccessMessage(fd, message);
+	sendSuccessMessage(client_to_remove->get_client_fd(), message);
+	return (0);
+}
+
+int Server::handleModePlusK(Channel *channel, std::string argument, int fd)
+{
+	// Expecting format: MODE <channel> +k <password>
+	// check if channel is already password protected
+	if (!channel->get_password().empty())
 	{
-		// Expecting format: MODE <channel> +t
-		// check if channel topic_mode is true
-		if (channel->get_topic_mode() == true)
-		{
-			message = "Error[MODE +t]: Channel " + channel_to_find + " already has topic mode set\r\n";
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		// set channel topic_mode to true
-		channel->set_topic_mode(true);
-		message = "Success[MODE +t]: Channel " + channel_to_find + " now has topic mode set\r\n";
-		sendSuccessMessage(fd, message);
-		return (0);
+		std::string message = "Error[MODE +k]: Channel " + channel->get_name() + " is already password protected\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
 	}
-	else if (mode == "-t")
+	// check if password is valid
+	if (password_checker(argument, fd))
+		return (1);
+	// change password of channel
+	channel->set_password(argument);
+	std::string message = "Success[MODE +k]: Channel " + channel->get_name() + " is now password protected\r\n";
+	sendSuccessMessage(fd, message);
+	return (0);
+}
+
+int Server::handleModeMinusK(Channel *channel, int fd)
+{
+	// Expecting format: MODE <channel> -k
+	// check if channel is already password protected
+	if (channel->get_password().empty())
 	{
-		// Expecting format: MODE <channel> -t
-		// check if channel topic_mode is false
-		if (channel->get_topic_mode() == false)
-		{
-			message = "Error[MODE -t]: Channel " + channel_to_find + " already has topic mode not set\r\n";
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		// set channel topic_mode to false
-		channel->set_topic_mode(false);
-		message = "Success[MODE -t]: Channel " + channel_to_find + " now has topic mode not set\r\n";
-		sendSuccessMessage(fd, message);
-		return (0);
+		std::string message = "Error[MODE -k]: Channel " + channel->get_name() + " is not password protected\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
 	}
-	else if (mode == "+l")
+
+	// remove password of channel
+	channel->set_password("");
+	std::string message = "Success[MODE -k]: Channel " + channel->get_name() + " is no longer password protected\r\n";
+	sendSuccessMessage(fd, message);
+	return (0);
+}
+
+int Server::handleModePlusI(Channel *channel, int fd)
+{
+	// Expecting format: MODE <channel> +i
+	// check if channel is already invite only
+	if (channel->get_channel_invite_only() == true)
 	{
-		// Expecting format: MODE <channel> +l <limit>
-		// transform argument into a number
-		std::istringstream issz(argument);
-		long unsigned int limit;
-		issz >> limit;
-		// change channel limit
-		channel->set_channel_limit(limit);
-		message = "Success[MODE +l]: Channel " + channel_to_find + " now has limit " + argument + "\r\n";
-		sendSuccessMessage(fd, message);
-		return (0);
+		std::string message = "Error[MODE +i]: Channel " + channel->get_name() + " is already invite only\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
 	}
-	else if (mode == "-l")
+
+	// set channel to invite only
+	channel->set_channel_invite_only(true);
+	std::string message = "Success[MODE +i]: Channel " + channel->get_name() + " is now invite only\r\n";
+	sendSuccessMessage(fd, message);
+	return (0);
+}
+
+int Server::handleModeMinusI(Channel *channel, int fd)
+{
+	// Expecting format: MODE <channel> -i
+	// check if channel is already invite only
+	if (channel->get_channel_invite_only() == false)
 	{
-		// Expecting format: MODE <channel> -l
-		// check if channel limit is 0
-		if (channel->get_channel_limit() == 0)
-		{
-			message = "Error[MODE -l]: Channel " + channel_to_find + " already has no limit\r\n";
-			sendErrorMessage(fd, message);
-			return (1);
-		}
-		// change channel limit
-		channel->set_channel_limit(0);
-		message = "Success[MODE -l]: Channel " + channel_to_find + " now has no limit\r\n";
-		sendSuccessMessage(fd, message);
-		return (0);
+		std::string message = "Error[MODE -i]: Channel " + channel->get_name() + " is not invite only\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
 	}
-	else
+	// set channel to invite only
+	channel->set_channel_invite_only(false);
+	std::string message = "Success[MODE -i]: Channel " + channel->get_name() + " is no longer invite only\r\n";
+	sendSuccessMessage(fd, message);
+	return (0);
+}
+
+int Server::handleModePlusT(Channel *channel, int fd)
+{
+	// Expecting format: MODE <channel> +t
+	// check if channel is already topic protected
+	if (channel->get_topic_mode() == true)
 	{
-		message = "Error[MODE]: Usage: MODE <channel> [+|-][o|k|i|t|l] <argument>\r\n";
+		std::string message = "Error[MODE +t]: Channel " + channel->get_name() + " is already topic protected\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
+	}
+
+	// set channel to topic protected
+	channel->set_topic_mode(true);
+	std::string message = "Success[MODE +t]: Channel " + channel->get_name() + " is now topic protected\r\n";
+	sendSuccessMessage(fd, message);
+	return (0);
+}
+
+int Server::handleModeMinusT(Channel *channel, int fd)
+{
+	// Expecting format: MODE <channel> -t
+	// check if channel is already topic protected
+	if (channel->get_topic_mode() == false)
+	{
+		std::string message = "Error[MODE -t]: Channel " + channel->get_name() + " is not topic protected\r\n";
 		sendErrorMessage(fd, message);
 		return (1);
 	}
+	// set channel to topic protected
+	channel->set_topic_mode(false);
+	std::string message = "Success[MODE -t]: Channel " + channel->get_name() + " is no longer topic protected\r\n";
+	sendSuccessMessage(fd, message);
+	return (0);
+}
+
+int Server::handleModePlusL(Channel *channel, std::string argument, int fd)
+{
+	// Expecting format: MODE <channel> +l <limit>
+	// check if channel is already limited
+	if (channel->get_channel_limit() != 0)
+	{
+		std::string message = "Error[MODE +l]: Channel " + channel->get_name() + " is already limited\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
+	}
+
+	// set channel limit argument converted to int
+	try
+	{
+		channel->set_channel_limit(safe_atoi(argument.c_str()));
+	}
+	catch (std::exception &e)
+	{
+		std::string message = "Error[MODE +l]: " + argument + " is a value out of integer range\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
+	}
+	channel->set_channel_limit(safe_atoi(argument.c_str()));
+	std::string message = "Success[MODE +l]: Channel " + channel->get_name() + " is now limited to " + argument + " users\r\n";
+	sendSuccessMessage(fd, message);
+	return (0);
+}
+
+int Server::handleModeMinusL(Channel *channel, int fd)
+{
+	// Expecting format: MODE <channel> -l
+	// check if channel limit is already 0
+	if (channel->get_channel_limit() == 0)
+	{
+		std::string message = "Error[MODE -l]: Channel " + channel->get_name() + " is not limited\r\n";
+		sendErrorMessage(fd, message);
+		return (1);
+	}
+
+	// set channel limit
+	channel->set_channel_limit(0);
+	std::string message = "Success[MODE -l]: Channel " + channel->get_name() + " is no longer limited\r\n";
+	sendSuccessMessage(fd, message);
 	return (0);
 }
 
@@ -593,7 +896,7 @@ int Server::cmd_join(Client &client, std::string input)
 		}
 	}
 	// check if client is banned use find_banned_client
-	if (it->find_banned_client(client))
+	if (it->find_banned_client_by_nickname(client))
 	{
 		message = ":localhost " + ERR_BANNEDFROMCHAN + " : Error[JOIN]: You (" + client.get_nickname() + ") are banned from channel " + input_channel_name + "\r\n";
 		sendErrorMessage(fd, message);
@@ -761,8 +1064,11 @@ int Server::cmd_topic(Client &client, std::string input)
 	iss >> channel_to_find;
 	// skip all kind of leading whitespaces
 	iss >> std::ws;
-	//skip :
-	iss.ignore(1, ':');
+	//skip : skip only the first ':'
+	
+	if (iss.peek() == ':')
+		iss.ignore();
+	//iss.ignore(1, ':'); //different from the above, this will ignore all ':' 
 	std::getline(iss, topic);
 
 	// if no channel name is given
@@ -779,6 +1085,14 @@ int Server::cmd_topic(Client &client, std::string input)
 		sendErrorMessage(client.get_client_fd(), error);
 		return (-1);
 	}
+	// if client does not belong to channel
+	std::string client_nickname = client.get_nickname();
+	if (!channel->find_client_in_channel_by_nickname(client_nickname))
+	{
+		std::string error = "Error[TOPIC]: You (" + client.get_nickname() + ") are not in channel " + channel_to_find + "\r\n";
+		sendErrorMessage(client.get_client_fd(), error);
+		return (-1);
+	}
 	// Set topic of channel
 	if (topic.empty() || strIsWhitespace(topic))
 	{
@@ -793,6 +1107,12 @@ int Server::cmd_topic(Client &client, std::string input)
 	}
 	// check if topic_mode is true
 	if (channel->get_topic_mode() == true && channel->find_clients_operator_channel(client))
+	{
+		std::string success = "Success[TOPIC]: topic changed to " + topic + "\r\n";
+		sendSuccessMessage(client.get_client_fd(), success);
+		channel->set_topic(topic);
+	}// add else if for when client is operator but topic_mode is false
+	else if (channel->get_topic_mode() == false && channel->find_client_in_channel_by_nickname(client_nickname))
 	{
 		std::string success = "Success[TOPIC]: topic changed to " + topic + "\r\n";
 		sendSuccessMessage(client.get_client_fd(), success);
diff --git a/Irc2BRANCH/ServerUtils.cpp b/Irc2BRANCH/ServerUtils.cpp
index 3f4b862..24b0500 100644
--- a/Irc2BRANCH/ServerUtils.cpp
+++ b/Irc2BRANCH/ServerUtils.cpp
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   ServerUtils.cpp                                    :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: gacorrei <gacorrei@student.42.fr>          +#+  +:+       +#+        */
+/*   By: abaiao-r <abaiao-r@student.42.fr>          +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/11/24 08:29:56 by gacorrei          #+#    #+#             */
-/*   Updated: 2023/11/24 09:51:14 by gacorrei         ###   ########.fr       */
+/*   Updated: 2023/11/27 15:47:22 by abaiao-r         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -258,7 +258,7 @@ int	Server::password_checker(std::string password)
 }
 /* password_checker: check if password is valid
  * 1. Check if password is between 3 and 12 characters
- * 2. Check if password contains non-printable characters
+ * 2. Check if password contains only non-printable characters
  */
 int	Server::password_checker(std::string password, int fd)
 {
